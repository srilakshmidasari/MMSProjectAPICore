// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ParentRoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.AssetFileRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FileExtention")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocumentType");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AssetFileRepository");
                });

            modelBuilder.Entity("DAL.Models.AssetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetMake")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetRef1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetRef2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AssetGroup");
                });

            modelBuilder.Entity("DAL.Models.AssetLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetCapacity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetMake")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetModel")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetSize")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AssetType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("AstCounter")
                        .HasColumnType("int");

                    b.Property<DateTime>("AstFixedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AstGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AstTradeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AstGroupId");

                    b.HasIndex("AstTradeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AssetLocation");
                });

            modelBuilder.Entity("DAL.Models.ClassType", b =>
                {
                    b.Property<int>("ClassTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClassType");
                });

            modelBuilder.Entity("DAL.Models.FileRepository", b =>
                {
                    b.Property<int>("RepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FileExtention")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepositoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocumentType");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FileRepository");
                });

            modelBuilder.Entity("DAL.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("ReceivedCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("DAL.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageCost")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ItemCategory")
                        .HasColumnType("int");

                    b.Property<string>("ItemReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UOMId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfConversion")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ItemCategory");

                    b.HasIndex("ItemType");

                    b.HasIndex("UOMId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("DAL.Models.JobPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("JobReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetGroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("JobPlan");
                });

            modelBuilder.Entity("DAL.Models.JobTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AstTradeId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AstTradeId");

                    b.HasIndex("JobPlanId");

                    b.ToTable("JobTask");
                });

            modelBuilder.Entity("DAL.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("DAL.Models.LookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LookUpTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LookUpTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LookUP");
                });

            modelBuilder.Entity("DAL.Models.LookUpProjectXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StoreId");

                    b.ToTable("LookUpProjectXref");
                });

            modelBuilder.Entity("DAL.Models.PMAssetXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("PreventiveMaintenanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PreventiveMaintenanceId");

                    b.ToTable("PMAssetXref");
                });

            modelBuilder.Entity("DAL.Models.PMStatusHistory", b =>
                {
                    b.Property<int>("PMStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PreventiveMaintenanceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PMStatusHistoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PreventiveMaintenanceId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("PMStatusHistory");
                });

            modelBuilder.Entity("DAL.Models.PreventiveMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaysApplicable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationinHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("JobPlanId")
                        .HasColumnType("int");

                    b.Property<string>("PreventiveRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfMaintenance")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkTechnicianId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("JobPlanId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("TypeOfMaintenance");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkTechnicianId");

                    b.ToTable("PreventiveMaintenance");
                });

            modelBuilder.Entity("DAL.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ProjectDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ProjectReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SiteId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DAL.Models.ProjectRepository", b =>
                {
                    b.Property<int>("ProjectRepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FileExtention")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectRepositoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocumentType");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProjectRepository");
                });

            modelBuilder.Entity("DAL.Models.PurchageItemXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<double>("ExpectdCost")
                        .HasColumnType("float");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PurchageId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchageId");

                    b.ToTable("PurchageItemXref");
                });

            modelBuilder.Entity("DAL.Models.PurchageOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtention")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PurchageOrder");
                });

            modelBuilder.Entity("DAL.Models.SiteInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtention")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SiteManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SiteReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SiteInfo");
                });

            modelBuilder.Entity("DAL.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FileExtention")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SupplierReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("DAL.Models.TypeCdDmt", b =>
                {
                    b.Property<int>("TypeCdDmtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TypeCdDmtId");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TypeCdDmt");
                });

            modelBuilder.Entity("DAL.Models.UserProjectXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjectXref");
                });

            modelBuilder.Entity("DAL.Models.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Issue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Reference1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkFaultId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkFaultId");

                    b.HasIndex("WorkStatusId");

                    b.HasIndex("WorkTechnicianId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("DAL.Models.WorkOrderItemXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderItemXref");
                });

            modelBuilder.Entity("DAL.Models.WorkOrderStatusHistory", b =>
                {
                    b.Property<int>("WorkOrderStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderStatusHistoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderStatusHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Models.AssetFileRepository", b =>
                {
                    b.HasOne("DAL.Models.AssetLocation", "Asset_Id")
                        .WithMany("App_Repository_Id")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_App_Repository_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_AssetFileRepository_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AssetFileRepository_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "Asset_TypeCdDmt")
                        .WithMany("Asset_DocumnetId")
                        .HasForeignKey("DocumentType")
                        .HasConstraintName("FK_Asset_DocumnetId");

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_AssetFileRepository_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_AssetFileRepository_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.AssetGroup", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_AssetGroup_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AssetGroup_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_AssetGroup_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_AssetGroup_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.AssetLocation", b =>
                {
                    b.HasOne("DAL.Models.LookUp", "AstGroup_Id")
                        .WithMany("App_AssetLocation_AstGroup_Id")
                        .HasForeignKey("AstGroupId")
                        .HasConstraintName("FK_App_AssetLocation_AstGroupId")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "AstTrade_Id")
                        .WithMany("App_AssetLocation_AstTrade_Id")
                        .HasForeignKey("AstTradeId")
                        .HasConstraintName("FK_App_AssetLocation_AstTradeId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_AssetLocation_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AssetLocation_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.Location", "Location_Id")
                        .WithMany("App_AssetLocation_LocationId")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_App_AssetLocation_LocationId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_AssetLocation_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_AssetLocation_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.ClassType", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_ClassType_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_ClassType_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_ClassType_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_ClassType_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.FileRepository", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_Repository_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_FileRepository_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "File_TypeCdDmt")
                        .WithMany("FileRepository_DocumentTypeId")
                        .HasForeignKey("DocumentType")
                        .HasConstraintName("FK_FileRepository_DocumentTypeId");

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_Repository_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_FileRepository_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Inventory", b =>
                {
                    b.HasOne("DAL.Models.Item", "Item_Id")
                        .WithMany("App_InventoryItemId_Id")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_App_InventoryItemId_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.PurchageOrder", "PurchaseOrder_Id")
                        .WithMany("App_Inventory_Order_Id")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_App_Inventory_Order_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Item", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_Item_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Item_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "ItemCategory_Id")
                        .WithMany("App_Item_ItemCategory_Id")
                        .HasForeignKey("ItemCategory")
                        .HasConstraintName("FK_App_Item_ItemCategoryId")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "ItemType_Id")
                        .WithMany("Item_ItemTypeId")
                        .HasForeignKey("ItemType")
                        .HasConstraintName("FK_Item_ItemType")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "UOM_Id")
                        .WithMany("App_Item_UOM_Id")
                        .HasForeignKey("UOMId")
                        .HasConstraintName("FK_App_Item_UOMId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_Item_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_Item_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.JobPlan", b =>
                {
                    b.HasOne("DAL.Models.LookUp", "AssetGroup_Id")
                        .WithMany("App_JobPlan_AssetGroup_Id")
                        .HasForeignKey("AssetGroupId")
                        .HasConstraintName("FK_App_JobPlan_AssetGroup_Id");

                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_JobPlan_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_App_JobPlan_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.Project", "Project_Id")
                        .WithMany("App_JobPlan_ProjectId")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_App_JobPlan_ProjectId");

                    b.HasOne("DAL.Models.SiteInfo", "Site_Id")
                        .WithMany("App_JobPlan_SiteId")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_App_JobPlan_SiteId");

                    b.HasOne("DAL.Models.TypeCdDmt", "StatusType_Id")
                        .WithMany("App_JobPlan_StatusId")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_App_JobPlan_StatusId")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "Technician_Id")
                        .WithMany("App_JobPlan_Techinician_Id")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK_App_JobPlan_Techinician_Id");

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_JobPlan_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_JobPlan_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.JobTask", b =>
                {
                    b.HasOne("DAL.Models.LookUp", "AstTrade_Id")
                        .WithMany("App_JobTask_AstTrade_Id")
                        .HasForeignKey("AstTradeId")
                        .HasConstraintName("FK_App_JobTask_AstTrade_Id");

                    b.HasOne("DAL.Models.JobPlan", "JobPlan_Id")
                        .WithMany("App_JobTask_JobPlanId")
                        .HasForeignKey("JobPlanId")
                        .HasConstraintName("FK_App_JobTask_JobPlanId")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Location", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_Location_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Location_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.Project", "Project")
                        .WithMany("Location_ProjectId")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Location_ProjectId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_Location_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_Location_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.LookUp", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_LookUp_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_LookUp_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "TypecdId")
                        .WithMany("LookUP_TypeId")
                        .HasForeignKey("LookUpTypeId")
                        .HasConstraintName("FK_App_LookUp_TypeId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_LookUp_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_LookUp_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.LookUpProjectXref", b =>
                {
                    b.HasOne("DAL.Models.Project", "Project_Id")
                        .WithMany("ProjectxrefId")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectxrefId")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "LookUp_Id")
                        .WithMany("StorexrefId")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StorexrefId")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.PMAssetXref", b =>
                {
                    b.HasOne("DAL.Models.AssetLocation", "Asset_Id")
                        .WithMany("App_PMAssetXref_Asset_Id")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_App_PMAssetXref_Asset_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.PreventiveMaintenance", "PreventiveMaintenance_Id")
                        .WithMany("App_PreventiveMaintenance_AssetXref_Id")
                        .HasForeignKey("PreventiveMaintenanceId")
                        .HasConstraintName("FK_App_PreventiveMaintenance_AssetXref_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.PMStatusHistory", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DAL.Models.PreventiveMaintenance", "PreventiveMaintenance_Id")
                        .WithMany("App_PMStatusHistory_PMtStatus_Id")
                        .HasForeignKey("PreventiveMaintenanceId")
                        .HasConstraintName("FK_App_PMStatusHistory_PMtStatus_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "TypeCdDmt")
                        .WithMany("App_PMStatusHistoryr_StatusId")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_App_PMStatusHistoryr_StatusId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("DAL.Models.PreventiveMaintenance", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_PreventiveMaintenance_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_App_PreventiveMaintenance_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.JobPlan", "JobPlan_Id")
                        .WithMany("App_PreventiveMaintenance_JobPlan_Id")
                        .HasForeignKey("JobPlanId")
                        .HasConstraintName("FK_App_PreventiveMaintenance_JobPlan_Id");

                    b.HasOne("DAL.Models.TypeCdDmt", "StatusType_Id")
                        .WithMany("App_PreventiveMaintenance_StatusId")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_App_PreventiveMaintenance_StatusId")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "TypeOfMaintenance_Id")
                        .WithMany("App_PreventiveMaintenance_MaintenanceId")
                        .HasForeignKey("TypeOfMaintenance")
                        .HasConstraintName("FK_AApp_PreventiveMaintenance_MaintenanceId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_PreventiveMaintenance_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_PreventiveMaintenance_UpdatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "WorkTechnician_Id")
                        .WithMany("App_PreventiveMaintenance_WorkTechinician_Id")
                        .HasForeignKey("WorkTechnicianId")
                        .HasConstraintName("FK_App_PreventiveMaintenance_WorkTechinician_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Project", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_Project_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Project_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.SiteInfo", "SiteInfo_Id")
                        .WithMany("App_Project_SiteId")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_App_Project_SiteId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_Project_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_Project_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.ProjectRepository", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_ProjectRepository_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_ProjectRepository_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "Project_TypeCdDmt")
                        .WithMany("ProjectRepository_DocumentTypeId")
                        .HasForeignKey("DocumentType")
                        .HasConstraintName("FK_ProjectRepository_DocumentTypeId");

                    b.HasOne("DAL.Models.Project", "Project_Id")
                        .WithMany("App_ProjectRepository_ProjectId")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_App_ProjectRepository_ProjectId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_ProjectRepository_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_ProjectRepository_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.PurchageItemXref", b =>
                {
                    b.HasOne("DAL.Models.Item", "Item_Id")
                        .WithMany("Purchage_ItemXref_Id")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Purchage_ItemXref_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.PurchageOrder", "Purchage_Id")
                        .WithMany("Purchage_OrderXref_Id")
                        .HasForeignKey("PurchageId")
                        .HasConstraintName("FK_Purchage_OrderXref_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.PurchageOrder", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_PurchageOrder_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_App_PurchageOrder_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.Project", "Project_Id")
                        .WithMany("App_PurchageOrder_ProjectId")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_App_PurchageOrder_ProjectId ")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "StatusType_Id")
                        .WithMany("Order_StatusTypeId")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_App_Order_StatusTypeId")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "Store_Id")
                        .WithMany("App_PurchageOrder_Store_Id")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_App_PurchageOrder_Store_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.Supplier", "Supplier_Id")
                        .WithMany("Purchage_Supplier_Id")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Purchage_Supplier_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_PurchageOrder_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_PurchageOrder_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.SiteInfo", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_SiteInfo_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_SiteInfo_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_SiteInfo_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_SiteInfo_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Supplier", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_Supplier_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Supplier_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_Supplier_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_Supplier_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.TypeCdDmt", b =>
                {
                    b.HasOne("DAL.Models.ClassType", "ClassType")
                        .WithMany("TypeCdDmt_ClassTypes")
                        .HasForeignKey("ClassTypeId")
                        .HasConstraintName("FK_TypeCdDmt_ClassTypes")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_TypeCdDmt_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_App_TypeCdDmt_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_TypeCdDmt_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_TypeCdDmt_UpdatedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.UserProjectXref", b =>
                {
                    b.HasOne("DAL.Models.Project", "Project_Id")
                        .WithMany("App_UserProjectXref_ProjectId")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_App_UserProjectXref_ProjectId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "User_Id")
                        .WithMany("App_UserProjectXref_UserId")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_App_UserProjectXref_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.WorkOrder", b =>
                {
                    b.HasOne("DAL.Models.AssetLocation", "Asset_Id")
                        .WithMany("App_WorkOrderAsset_Id")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_App_WorkOrderAsset_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_WorkOrder_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_App_WorkOrder_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "OrderType_Id")
                        .WithMany("App_WorkOrder_OrderTypeId")
                        .HasForeignKey("OrderTypeId")
                        .HasConstraintName("FK_App_WorkOrder_OrderTypeId")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "StatusType_Id")
                        .WithMany("WorkOrder_StatusTypeId")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_WorkOrder_StatusTypeId")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "Store_Id")
                        .WithMany("App_WorkOrder_Store_Id")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_App_WorkOrder_Store_Id");

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_WorkOrder_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_WorkOrder_UpdatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.LookUp", "WorkFault_Id")
                        .WithMany("App_WorkOrder_WorkFault_Id")
                        .HasForeignKey("WorkFaultId")
                        .HasConstraintName("FK_App_WorkOrder_WorkFault_Id");

                    b.HasOne("DAL.Models.LookUp", "WorkStatus_Id")
                        .WithMany("App_WorkOrder_WorkSatus_Id")
                        .HasForeignKey("WorkStatusId")
                        .HasConstraintName("FK_App_WorkOrder_WorkSatus_Id");

                    b.HasOne("DAL.Models.LookUp", "WorkTechnician_Id")
                        .WithMany("App_WorkOrder_WorkTechinician_Id")
                        .HasForeignKey("WorkTechnicianId")
                        .HasConstraintName("FK_App_WorkOrder_WorkTechinician_Id");

                    b.HasOne("DAL.Models.LookUp", "WorkType_Id")
                        .WithMany("App_WorkOrder_WorkType_Id")
                        .HasForeignKey("WorkTypeId")
                        .HasConstraintName("FK_App_WorkOrder_WorkType_Id");
                });

            modelBuilder.Entity("DAL.Models.WorkOrderItemXref", b =>
                {
                    b.HasOne("DAL.Models.Item", "Item_Id")
                        .WithMany("App_WorkOrderItemIdXref_Id")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_App_WorkOrderItemIdXref_Id")
                        .IsRequired();

                    b.HasOne("DAL.Models.WorkOrder", "WorkOrder_Id")
                        .WithMany("App_WorkOrderItemxref_Id")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_App_WorkOrderItemxref_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.WorkOrderStatusHistory", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "CreatedUser")
                        .WithMany("App_WorkOrderStatusHistory_CreatedUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_App_WorkOrderStatusHistory_CreatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.TypeCdDmt", "TypeCdDmt")
                        .WithMany("App_WorkOrderStatusHistory_StausId")
                        .HasForeignKey("StatusTypeId")
                        .HasConstraintName("FK_App_WorkOrderStatusHistory_StausId")
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "UpdatedUser")
                        .WithMany("App_WorkOrderStatusHistory_UpdatedUser")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_App_WorkOrderStatusHistory_UpdatedUser")
                        .IsRequired();

                    b.HasOne("DAL.Models.WorkOrder", "WorkOrder_Id")
                        .WithMany("App_WorkOrderStatusHistory_Id")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_App_WorkOrderStatusHistory_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
